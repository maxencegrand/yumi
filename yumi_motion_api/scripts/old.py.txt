def check_join_target(value):
    """check joint value"""
    return value <= pi and value >= -pi

def clamp(num, min_value, max_value):
    """Clamp"""
    return max(min(num, max_value), min_value)

class Yumi:
    """
        Yumi
    """

    def __init__(self):
        moveit_commander.roscpp_initialize(sys.argv)
        ## Instantiate a `RobotCommander`_ object. Provides information such as the robot's
        ## kinematic model and the robot's current joint states
        self.robot = RobotCommander()
        self.group_l = init_arm("left_arm")
        self.group_r = init_arm("right_arm")
        self.group_both = init_arm("both_arms")
        display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path', 	moveit_msgs.msg.DisplayTrajectory, queue_size=20)
        rospy.sleep(3)
        print("============ Yumi Initialized")


    ###################################################
    ############### Status Methods ####################
    ###################################################

    def get_current_pose(self,  right=True):
        """Gets the current pose

        Return the current pose of the selected arm

        @param right True if the selected arm is the right one
        @returns Pose
        @rtype PoseStamped
        """
        return self.group_r.get_current_pose() if right \
            else self.group_l.get_current_pose()

    def get_current_rpy(self,  right=True):
        """Gets the current oint values

        Return the current position of all joints of the selected arm as Euler angles

        @param right True if the selected arm is the right one
        @returns Orientation
        @rtype Orientation
        """
        return self.group_r.get_current_rpy() if right \
            else self.group_l.get_current_rpy()

    def get_current_joint_values(self,  right=True):
        """Gets the current joint values

        Return the current joint values of the selected arm

        @param right True if the selected arm is the right one
        @returns Joint values
        @rtype float[]
        """
        return self.group_r.get_current_joint_values() if right \
            else self.group_l.get_current_joint_values()

    def print_arm_status(self, right=True):
        """prints the status of the selected arm

        @param right True if the selected arm is the right one
        @returns None
        """
        sel = "right" if right else "left"
        print(f"Yumi's {sel} arm status")
        print(self.get_current_pose(right))
        print(self.get_current_rpy(right))
        print(self.get_current_joint_values(right))

    def print_status(self):
        """Prints yumi's status

        @return None
        """
        self.print_arm_status(right=True)
        self.print_arm_status(right=False)

    def changeEGMSettings(self):
        """Changes EGM Settings"""
        rospy.wait_for_service('/yumi/rws/sm_addin/get_egm_settings')
        rospy.wait_for_service('/yumi/rws/sm_addin/set_egm_settings')
        # rospy.wait_for_service("/yumi/rws/sm_addin/stop_egm")

        # stop_egm = rospy.ServiceProxy("/yumi/rws/sm_addin/stop_egm", TriggerWithResultCode)

        get_egm_settings = rospy.ServiceProxy("/yumi/rws/sm_addin/get_egm_settings", GetEGMSettings)
        set_egm_settings = rospy.ServiceProxy("/yumi/rws/sm_addin/set_egm_settings", SetEGMSettings)

        current_settings_L = get_egm_settings(task='T_ROB_L')
        current_settings_R = get_egm_settings(task='T_ROB_R')

        settings_L = current_settings_L.settings
        settings_R = current_settings_R.settings

        # max_speed_deviation is in deg/s, we convert from rad/s
        settings_L.activate.max_speed_deviation = degrees(7.0)
        settings_R.activate.max_speed_deviation = degrees(7.0)

        # settings.activate.cond_min_max

        # settings.run.cond_time
        settings_L.run.cond_time = 60.0
        settings_R.run.cond_time = 60.0
        # posCorrgain = 0.0
        settings_L.run.pos_corr_gain = 0.0
        settings_R.run.pos_corr_gain = 0.0

        # stop_egm()
        taskname = "T_ROB_L"
        set_egm_settings(task=taskname, settings=settings_L)

        taskname = "T_ROB_R"
        set_egm_settings(task=taskname, settings=settings_R)

        print("===================== EGM Settings Updated =====================")

    ###################################################
    ############## Movements Methods ##################
    ###################################################

    def go_to_pose_goal(self, target, right=True):
        """Plans and moves the selected arm to target

        Creates a plan to move a group to the given target.

        @param target: The pose to move to
        @param right True if the selected arm is the right one
        @returns None
        """
        euler = tf.transformations.euler_from_quaternion((target.orientation.x, target.orientation.y, target.orientation.z, target.orientation.w))

        # TODO: check pose or joint egm
        rospy.wait_for_service("/yumi/rws/sm_addin/start_egm_joint")
        rospy.wait_for_service("/yumi/rws/sm_addin/stop_egm")
        # rospy.wait_for_service("/yumi/egm/controller_manager/switch_controller")

        start_egm = rospy.ServiceProxy("/yumi/rws/sm_addin/start_egm_joint", TriggerWithResultCode)
        stop_egm = rospy.ServiceProxy("/yumi/rws/sm_addin/stop_egm", TriggerWithResultCode)

        if (right):
            arm = 'right'
            group = self.group_r
            controller = "right_arm_vel_controller"
        else:
            arm = 'left'
            group = self.group_l
            controller ="left_arm_vel_controller"

        rospy.loginfo('Planning and moving ' + arm + ' arm: Position: {' + str(target.position.x) + ';' + str(target.position.y) + ';' + str(target.position.z) +
                                            '}. Rotation: {' + str(euler[0]) + ';' + str(euler[1]) + ';' + str(euler[2]) + '}.')

        tic = time.time()

        group.set_pose_target(copy.deepcopy(target))
        plan = group.plan()
        # waypoints = []

        # wpose = group.get_current_pose().pose
        # print(wpose)
        # waypoints.append(copy.deepcopy(wpose))
        # waypoints.append(copy.deepcopy(target))
        # (plan, fraction) = group.compute_cartesian_path(
        #     waypoints, 0.01, 0.0  # waypoints to follow  # eef_step
        # )  # jump_threshold
        for p_ in plan:
            print('///////////////////////////////////////////////////////////////')
            print(type(p_))
            print(p_)
        # print(fraction)
        toc = time.time()
        dur1 = round(toc - tic, 3)
        print("\nPlanning Time is: {} seconds!".format(dur1))
        time.sleep(1)
        self.changeEGMSettings()
        start_egm()

        controller_conf = "start_controllers: [{}] \nstop_controllers: [''] \nstrictness: 1 \nstart_asap: false \ntimeout: 0.0".format(controller)
        import subprocess
        subprocess.run(["rosservice", "call", "/yumi/egm/controller_manager/switch_controller", controller_conf])

        # success = group.go(wait=True)
        # Calling `stop()` ensures that there is no residual movement

        # group.execute(plan_x, wait=True)
        # group.execute(plan_y, wait=True)
        # group.execute(plan_z, wait=True)
        group.go(wait=True)
        group.stop()
        # It is always good to clear your targets after planning with poses.
        # Note: there is no equivalent function for clear_joint_value_targets().
        group.clear_pose_targets()
        rospy.sleep(3)

    def go_to_joint_state(self, joint_goal, group, controller):
        """Plans and moves the selected group to the joint goal

        Creates a plan to move a group to the given joint goal.

        @param target: The joint goal
        @param group: The group to move
        @controller: The controller
        @returns None
        """

        rospy.wait_for_service("/yumi/rws/sm_addin/start_egm_joint")
        rospy.wait_for_service("/yumi/rws/sm_addin/stop_egm")
        # rospy.wait_for_service("/yumi/egm/controller_manager/switch_controller")

        start_egm = rospy.ServiceProxy("/yumi/rws/sm_addin/start_egm_joint", TriggerWithResultCode)
        stop_egm = rospy.ServiceProxy("/yumi/rws/sm_addin/stop_egm", TriggerWithResultCode)
        # switch_controller = rospy.ServiceProxy("/yumi/egm/controller_manager/switch_controller", SwitchController)

        stop_egm()

        tic = time.time()

        group.set_joint_value_target(joint_goal)
        group.plan()

        toc = time.time()
        dur1 = round(toc - tic, 3)
        print("\nPlanning Time is: {} seconds!".format(dur1))
        # TODO: check if this sleep is necessary.
        time.sleep(1)
        self.changeEGMSettings()
        start_egm()

        # print("controller:", controller)

        # switch_controller(start_controllers=list(controller), stop_controllers=[""], strictness=1, start_asap=False, timeout=0.0)
        controller_conf = "start_controllers: [{}] \nstop_controllers: [''] \nstrictness: 1 \nstart_asap: false \ntimeout: 0.0".format(controller)
        import subprocess
        subprocess.run(["rosservice", "call", "/yumi/egm/controller_manager/switch_controller", controller_conf])

        group.go(wait=True)
        # Calling `stop()` ensures that there is no residual movement
        group.stop()

        rospy.sleep(3)

    def go_to_joint_state_arm(self, joint_goal, right=True):
        """Plans and moves the selected arm to the joint goal

        Creates a plan to move a group to the given joint goal.

        @param target: The joint goal
        @param right True if the selected arm is the right one
        @returns None
        """

        group = self.group_r if right else self.group_l
        controller = "right_arm_vel_controller" if right else "left_arm_vel_controller"
        self.go_to_joint_state(joint_goal, group, controller)

    def go_to_joint_state_both(self, joint_goal):
        """Plans and moves both arms to the joint goal

        Creates a plan to move a group to the given joint goal.

        @param right True if the selected arm is the right one
        @returns None
        """

        self.go_to_joint_state(joint_goal, self.group_both, "both_arms_vel_controller")

    ###################################################
    ############### Grippers Methods ##################
    ###################################################

    def calibrateGrippers(self):
        """Calibrates Yumi's Gripper"""
        rospy.wait_for_service('/yumi/rws/sm_addin/set_sg_command')
        rospy.wait_for_service('/yumi/rws/sm_addin/run_sg_routine')

        set_sg_command = rospy.ServiceProxy("/yumi/rws/sm_addin/set_sg_command", SetSGCommand)
        run_sg_routine = rospy.ServiceProxy("/yumi/rws/sm_addin/run_sg_routine", TriggerWithResultCode)

        """
        uint8 SG_COMMAND_INITIALIZE   = 3
        uint8 SG_COMMAND_CALIBRATE    = 4
        uint8 SG_COMMAND_MOVE_TO      = 5
        uint8 SG_COMMAND_GRIP_IN      = 6
        uint8 SG_COMMAND_GRIP_OUT     = 7
        """
        task_l = 'T_ROB_L'
        task_r = 'T_ROB_R'
        fin_pos = 0.0
        # # Close Grippers
        cmd = 6
        set_sg_command(task=task_l, command=cmd, target_position=fin_pos)
        set_sg_command(task=task_r, command=cmd, target_position=fin_pos)
        run_sg_routine()
        time.sleep(1)
        # # Calibrate Grippers
        cmd = 4
        set_sg_command(task=task_l, command=cmd, target_position=fin_pos)
        set_sg_command(task=task_r, command=cmd, target_position=fin_pos)
        run_sg_routine()
        time.sleep(2)
        print('===================== Grippers: Calibrated =====================')


    def effort(self, pos, right=True):
        """Set gripper effort

        Sends a pos command to the selected gripper. Should be in the range of
        20.0 (fully open) to 0.0 (fully closed)

        :param gripper_id: The ID of the selected gripper (LEFT or RIGHT)
        :param pos: The pos value for the gripper (0.0 to 20.0)
        :type gripper_id: int
        :type pos: float
        :returns: Nothing
        :rtype: None
        """
        pos = clamp(pos, 0, 20)
        gripper_id = 'right' if right else 'left'
        rospy.loginfo("Setting gripper " + str(gripper_id) + " to " + str(pos))
        rospy.loginfo('Setting gripper pos to ' + str(pos) + ' for arm ' + str(gripper_id))

        rospy.wait_for_service('/yumi/rws/sm_addin/set_sg_command')
        rospy.wait_for_service('/yumi/rws/sm_addin/run_sg_routine')

        set_sg_command = rospy.ServiceProxy("/yumi/rws/sm_addin/set_sg_command", SetSGCommand)
        run_sg_routine = rospy.ServiceProxy("/yumi/rws/sm_addin/run_sg_routine", TriggerWithResultCode)

        task_L = 'T_ROB_L'
        task_R = 'T_ROB_R'
        cmd = 5
        if right:
            set_sg_command(task=task_R, command=cmd, target_position=pos)
            run_sg_routine()
            time.sleep(1)
        else:
            set_sg_command(task=task_L, command=cmd, target_position=pos)
            run_sg_routine()
            time.sleep(1)
        rospy.sleep(1.0)
# jkh
